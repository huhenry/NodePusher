#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('NodePusher:server');
var http = require('http');

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);
var message = require("../lib/message.js").Message;

var connections = {};
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, function () {

    console.log("server is Listening on %s", port);
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}


io.on('connection', function (socket) {
    socket.auth = false;
    console.log("new client joined! %s", socket.id);
    socket.setMaxListeners(0);
    socket.on('authenticate', function (data) {
        console.log('socket client ask for auth %s : %s : %s', data.token, data.email, socket.id);

        //check the auth data sent by the client
        checkAuthToken(data, function (err, success) {
            if (!err && success) {
                console.log("Authenticated socket ", socket.id);
                socket.auth = true;
                socket.email = data.email.toLowerCase();

                // store the connected socket client on online list
                connections[data.email.toLowerCase()] = socket;

                socket.emit('authenticated', success);


                receiveMessage(data.email, function (err, messages) {
                    if (err) return;
                    var sendMessage = [];
                    if (messages.length > 0) {
                        socket.emit("receiveMessage", messages);
                    }
                    for (var i = 0; i < message.length; i++) {

                        var now = new Date().toISOString().replace(/T/, ' ').replace(/\..+/, '');
                        message.ReceiveMessage(message[i].messageId, now, function (err, data) {
                        });
                    }
                });


            } else if (err) {
                console.log('Authentication error socket %s: %s', socket.id, err.message);
                socket.emit('unauthorized', {message: err.message}, function () {
                    socket.disconnect();
                });
            } else {
                console.log('Authentication failure socket %s', socket.id);
                socket.emit('unauthorized', {message: 'Authentication failure'}, function () {
                    socket.disconnect();
                });
            }
        });
    });

    setTimeout(function () {
        //If the socket didn't authenticate, disconnect it
        if (!socket.auth) {
            console.log("Disconnecting socket ", socket.id);
            socket.disconnect('unauthorized');
        }
    }, 600000);


    socket.on('disconnect', function (clientInfo) {

        // remove online connectios when client socket disconnect
        if (connections[socket.email]) {
            connections[socket.email] = null;
        }

    });


    socket.on('sendMessage', function (data) {
        console.log("receive message from %s to %s with message : %s", data.from, data.to, data.message);
        var receiveEmail = data.to.toLowerCase();
        target = connections[receiveEmail];
        if (target) {

            var now = new Date().toISOString().replace(/T/, ' ').replace(/\..+/, '');

            data.sendDate = now;
            console.log("send message to %s", target.email);
            target.emit("receiveMessage", data);
            message.SaveMessage(data.from.toLowerCase(), data.to.toLowerCase(), data.message, now, now, function (err, data) {

            });
        }
        else {

            var now = new Date().toISOString().replace(/T/, ' ').replace(/\..+/, '');
            message.SaveMessage(data.from.toLowerCase(), data.to.toLowerCase(), data.message, now, null, function (err, data) {

            });

        }
    });



});

var receiveMessage = function (email, callback) {
    message.ReadMessage(email, function (err, messages) {
        if (err) {
            callback(true, null);
        }
        else {
            callback(false, messages);
        }

    })
};

var checkAuthToken = function (data, cb) {
    if (!data.token) {
        cb(new Error('Missing credentials'));
    }

    cb(null, data.token === 'fixedtoken');
};